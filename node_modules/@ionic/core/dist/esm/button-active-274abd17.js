import { w as writeTask } from './index-29df6f59.js';
import { createGesture } from './index-eea61379.js';
import { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';

const createButtonActiveGesture = (el, isButton) => {
    let touchedButton;
    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {
        if (typeof document === 'undefined') {
            return;
        }
        const target = document.elementFromPoint(x, y);
        if (!target || !isButton(target)) {
            clearActiveButton();
            return;
        }
        if (target !== touchedButton) {
            clearActiveButton();
            setActiveButton(target, hapticFeedbackFn);
        }
    };
    const setActiveButton = (button, hapticFeedbackFn) => {
        touchedButton = button;
        const buttonToModify = touchedButton;
        writeTask(() => buttonToModify.classList.add('ion-activated'));
        hapticFeedbackFn();
    };
    const clearActiveButton = (dispatchClick = false) => {
        if (!touchedButton) {
            return;
        }
        const buttonToModify = touchedButton;
        writeTask(() => buttonToModify.classList.remove('ion-activated'));
        if (dispatchClick) {
            touchedButton.click();
        }
        touchedButton = undefined;
    };
    return createGesture({
        el,
        gestureName: 'buttonActiveDrag',
        threshold: 0,
        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart),
        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged),
        onEnd: () => {
            clearActiveButton(true);
            hapticSelectionEnd();
        }
    });
};

export { createButtonActiveGesture as c };
