'use strict';

const index = require('./index-aa4819ad.js');
const index$2 = require('./index-fdd5743d.js');
const haptic = require('./haptic-4965d822.js');

const createButtonActiveGesture = (el, isButton) => {
    let touchedButton;
    const activateButtonAtPoint = (x, y, hapticFeedbackFn) => {
        if (typeof document === 'undefined') {
            return;
        }
        const target = document.elementFromPoint(x, y);
        if (!target || !isButton(target)) {
            clearActiveButton();
            return;
        }
        if (target !== touchedButton) {
            clearActiveButton();
            setActiveButton(target, hapticFeedbackFn);
        }
    };
    const setActiveButton = (button, hapticFeedbackFn) => {
        touchedButton = button;
        const buttonToModify = touchedButton;
        index.writeTask(() => buttonToModify.classList.add('ion-activated'));
        hapticFeedbackFn();
    };
    const clearActiveButton = (dispatchClick = false) => {
        if (!touchedButton) {
            return;
        }
        const buttonToModify = touchedButton;
        index.writeTask(() => buttonToModify.classList.remove('ion-activated'));
        if (dispatchClick) {
            touchedButton.click();
        }
        touchedButton = undefined;
    };
    return index$2.createGesture({
        el,
        gestureName: 'buttonActiveDrag',
        threshold: 0,
        onStart: ev => activateButtonAtPoint(ev.currentX, ev.currentY, haptic.hapticSelectionStart),
        onMove: ev => activateButtonAtPoint(ev.currentX, ev.currentY, haptic.hapticSelectionChanged),
        onEnd: () => {
            clearActiveButton(true);
            haptic.hapticSelectionEnd();
        }
    });
};

exports.createButtonActiveGesture = createButtonActiveGesture;
