import { w as writeTask } from './index-29df6f59.js';
import { createGesture } from './index-eea61379.js';
import { h as hapticSelectionEnd, a as hapticSelectionStart, b as hapticSelectionChanged } from './haptic-7b8ba70a.js';
var createButtonActiveGesture = function (el, isButton) {
    var touchedButton;
    var activateButtonAtPoint = function (x, y, hapticFeedbackFn) {
        if (typeof document === 'undefined') {
            return;
        }
        var target = document.elementFromPoint(x, y);
        if (!target || !isButton(target)) {
            clearActiveButton();
            return;
        }
        if (target !== touchedButton) {
            clearActiveButton();
            setActiveButton(target, hapticFeedbackFn);
        }
    };
    var setActiveButton = function (button, hapticFeedbackFn) {
        touchedButton = button;
        var buttonToModify = touchedButton;
        writeTask(function () { return buttonToModify.classList.add('ion-activated'); });
        hapticFeedbackFn();
    };
    var clearActiveButton = function (dispatchClick) {
        if (dispatchClick === void 0) { dispatchClick = false; }
        if (!touchedButton) {
            return;
        }
        var buttonToModify = touchedButton;
        writeTask(function () { return buttonToModify.classList.remove('ion-activated'); });
        if (dispatchClick) {
            touchedButton.click();
        }
        touchedButton = undefined;
    };
    return createGesture({
        el: el,
        gestureName: 'buttonActiveDrag',
        threshold: 0,
        onStart: function (ev) { return activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionStart); },
        onMove: function (ev) { return activateButtonAtPoint(ev.currentX, ev.currentY, hapticSelectionChanged); },
        onEnd: function () {
            clearActiveButton(true);
            hapticSelectionEnd();
        }
    });
};
export { createButtonActiveGesture as c };
